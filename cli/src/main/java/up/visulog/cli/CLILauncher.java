package up.visulog.cli;

import up.visulog.analyzer.Analyzer;
import up.visulog.config.Configuration;
import up.visulog.config.PluginConfig;

/*
La classe FileSystems d√©finit des m√©thodes pour cr√©er des syst√®mes de fichiers qui fournissent l'acc√®s √† d'autres types de syst√®mes de fichiers (personnalis√©s). 
Un syst√®me de fichiers est la fabrique de plusieurs types d'objets: La m√©thode getPath convertit une cha√Æne de chemin d√©pendante du syst√®me, renvoyant un objet Path qui peut 
√™tre utilis√© pour localiser et acc√©der √† un fichier.La classe FileSystems d√©finit des m√©thodes pour cr√©er des syst√®mes de fichiers qui fournissent l'acc√®s √† d'autres types de 
syst√®mes de fichiers (personnalis√©s). Un syst√®me de fichiers est la fabrique de plusieurs types d'objets: La m√©thode getPath convertit une cha√Æne de chemin d√©pendante du syst√®me, 
renvoyant un objet Path qui peut √™tre utilis√© pour localiser et acc√©der √† un fichier.
*/
import java.nio.file.FileSystems;
/*
HashMap est une classe de collection bas√©e sur Map qui est utilis√©e pour stocker des paires cl√© et valeur, elle est d√©sign√©e par HashMap <Key, Value> ou HashMap <K, V>. 
Cette classe ne donne aucune garantie quant √† l'ordre de la carte. Elle est similaire √† la classe Hashtable sauf qu'elle n'est pas synchronis√©e et autorise les valeurs nulles 
(valeurs nulles et cl√© nulle).
*/
import java.util.HashMap;
/*
Optional est un objet conteneur utilis√© pour contenir des objets non nuls. L'objet Optional est utilis√© pour repr√©senter null avec une valeur absente. 
Cette classe a diverses m√©thodes utilitaires pour faciliter le code pour g√©rer les valeurs comme ¬´disponibles¬ª ou ¬´non disponibles¬ª au lieu de v√©rifier les valeurs nulles.
*/
import java.util.Optional;

/*
    Le fichier CLILauncher.java poss√®dent deux m√©thodes : makeConfigFromCommandLineArgs(String[] args) et displayHelpAndExit().
        La m√©thode makeConfigFromCommandLineArgs(String[] args) permet √† l'utilisateur de choisir une des commandes disponibles 
            ( les commandes sont expliqu√©es avec des commentaires dans la m√©thode ).
        La m√©thode displayHelpAndExit() permet √† l'utilisateur de connna√Ætre les commandes disponibles.
*/

public class CLILauncher {

    public static void main(String[] args) {
        var config = makeConfigFromCommandLineArgs(args);
        if (config.isPresent()) {
            var analyzer = new Analyzer(config.get());
            var results = analyzer.computeResults();
            results.createPageHtml("page", "pie"); // nom de la page et le type de graphique
        } else displayHelpAndExit();
    }

    static Optional<Configuration> makeConfigFromCommandLineArgs(String[] args) {
        var gitPath = FileSystems.getDefault().getPath(".");
        var plugins = new HashMap<String, PluginConfig>();
        for (var arg : args) {
            if (arg.startsWith("--")) {
                String[] parts = arg.split("=");
                if (parts.length != 2) return Optional.empty();
                else {
                    String pName = parts[0];
                    String pValue = parts[1];
                    switch (pName.toLowerCase()) { //to Lower case = rendre ne miniscule
	                	case "--allplugin":
	                		// TODO : Ce system compile l'emsemble des plugins prÈsent dans nos plus
	                		//Il permet de gagner du temps quant a la generation d'un site de plugin #WilliamBenakli
	                		break;
	                    case "--addplugin":
	                        // TODO: parse argument and make an instance of PluginConfig	
	                        // Let's just trivially do this, before the TODO is fixed:
	                        if (pValue.equalsIgnoreCase("countCommits"))plugins.put("countCommits", new PluginConfig() {});
                            if (pValue.equalsIgnoreCase("countMergesCommits")) plugins.put("countMergesCommits", new PluginConfig() {});
	                        
	//                        if (pValue.equalsIgnoreCase("countCommitPerDate:54050:WILLIAM")) plugins.put("countCommitPerDate--29/59/2002", new PluginConfig() {
	//
	//                        });
	                        break;
	                    case "--loadconfigfile":
	                		// TODO: Ce system prend en parametre un fichier YAML et recherche toutes les plugins demandÈs 
	                		//Une fois fait il crÈer tous les plugins necessaires et crÈer le html correspondant #WilliamBenakli
	                        break;
	                    case "--justsaveconfigfile":
	                        // TODO: (save command line options to a file instead of running the analysis)
	                    	//Objectif est de crÈer un fichier File et d'y entrer les options et les commandes !
	//                    	System.out.println("List de vos configuration prÈsent dans : " + filename.path()); #WilliamBenakli
	                    	break;
	                    default:
                        return Optional.empty();
                }
            }
            } else {
                gitPath = FileSystems.getDefault().getPath(arg);
            }
        }
        return Optional.of(new Configuration(gitPath, plugins));
    }

    private static void displayHelpAndExit() {
        System.out.println("(WTS) Commande non reconnue");
        System.out.println("# Commande prÈsente  #");
        System.out.println("  --addPlugin=[countCommits,countMerges, countCommitsPerDate:00/00/00]");
        System.out.println("  --loadConfigFile");
        System.out.println("  --justSaveConfigFile");
        System.out.println("  --allPlugin");
        System.out.println("# Commande prÈsente  #");
        System.exit(0);
    }
}
